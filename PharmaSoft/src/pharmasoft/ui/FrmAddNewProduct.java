/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrmAddNewMember.java
 *
 * Created on Jul 16, 2011, 9:56:54 AM
 */
package pharmasoft.ui;

/**
 *
 * @author vipula
 */

import pharmasoft.ui.util.UiSupliment;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import com.toedter.calendar.JDateChooser;

import net.java.balloontip.BalloonTip;
import net.java.balloontip.BalloonTip.AttachLocation;
import net.java.balloontip.BalloonTip.Orientation;
import net.java.balloontip.styles.BalloonTipStyle;
import net.java.balloontip.styles.ModernBalloonStyle;
import pharmasoft.db.model.Supplier;
import pharmasoft.db.dao.CommonDAO;
import pharmasoft.db.dao.ProductDAO;
import pharmasoft.db.model.Customer;
import pharmasoft.db.model.Product;
import pharmasoft.util.RegularExpression;
import pharmasoft.util.StringFormatter;
import java.awt.event.KeyAdapter;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class FrmAddNewProduct extends javax.swing.JInternalFrame {

    /** Creates new form FrmAddNewMember */
    private int supplierId;
    private int productId;
    private int batchRowCount;
    private Vector batchProduct;
    private JPanel JInnerPannel;

    private CommonDAO commonDAO;
    private ProductDAO productDAO;
    private Dimension localFrm;

    public JPanel getJInnerPannel() {
        return JInnerPannel;
    }

    public void setJInnerPannel(JPanel JInnerPannel) {
        this.JInnerPannel = JInnerPannel;
    }

    public int getSupplierId() {
        return supplierId;
    }

    public void setSupplierId(int supplierId) {
        this.supplierId = supplierId;
    }
    
    public int getProductId() {
        return productId;
    }

    public void setProductId(int productId) {
        this.productId = productId;
    }
    
    public int getBatchRowCount() {
        return batchRowCount;
    }

    public void setBatchRowCount(int batchRowCount) {
        this.batchRowCount = batchRowCount;
    }
    
    public Vector getBatchProduct() {
        return batchProduct;
    }

    public void setBatchProduct(Vector batchProduct) {
        this.batchProduct = batchProduct;
    }

    public FrmAddNewProduct(Dimension innerPannel) {
        initComponents();
        JInnerPannel = JInnerPannel;
        this.setJInnerPannel(JInnerPannel);
        commonDAO = new CommonDAO();
        productDAO = new ProductDAO();
        localFrm = UiSupliment.getFormLocation(innerPannel, this.getSize());
        this.setClosable(true);
        this.setMaximizable(true);
        this.setResizable(true);
        this.setIconifiable(true);
        this.setLocation((int) localFrm.getWidth(), (int) localFrm.getHeight());
        this.txtSupplier.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        this.txtProNameE.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        createEvents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lblAddress = new javax.swing.JLabel();
        txtWholesalePrice = new javax.swing.JTextField();
        txtWholesalePrice.setName("Whole Sale Price");
        lblTelNo = new javax.swing.JLabel();
        txtUnitSize = new javax.swing.JTextField();
        txtUnitSize.setName("Unit Size");
        txtDiscount = new javax.swing.JTextField();
        txtRetailPrice = new javax.swing.JTextField();
        txtRetailPrice.setName("Retail Price");
        lblName2 = new javax.swing.JLabel();
        txtProName = new javax.swing.JTextField();
        txtProName.setName("Product Name");
        lblName4 = new javax.swing.JLabel();
        txtProDesc = new javax.swing.JTextField();
        txtProDesc.setName("Product Description");
        lblAddress2 = new javax.swing.JLabel();
        lblAddress3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtSupplier = new javax.swing.JTextField();
        txtSupplier.setName("Supplier");
        jLabel3 = new javax.swing.JLabel();
        jDateExpire = new com.toedter.calendar.JDateChooser();
        jDateExpire.setName("Expire Date");
        btnAdd = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        lblAddress1 = new javax.swing.JLabel();
        txtWholesalePriceE = new javax.swing.JTextField();
        txtWholesalePriceE.setName("Whole Sale Price");
        lblTelNo1 = new javax.swing.JLabel();
        txtUnitSizeE = new javax.swing.JTextField();
        txtUnitSizeE.setName("Unit Size");
        txtDiscountE = new javax.swing.JTextField();
        txtRetailPriceE = new javax.swing.JTextField();
        txtRetailPriceE.setName("Retail Price");
        lblName3 = new javax.swing.JLabel();
        txtProNameE = new javax.swing.JTextField();
        txtProNameE.setName("Product Name");
        lblName5 = new javax.swing.JLabel();
        txtProDescE = new javax.swing.JTextField();
        txtProDescE.setName("Product Description");
        lblAddress4 = new javax.swing.JLabel();
        lblAddress5 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtSupplierE = new javax.swing.JTextField();
        txtSupplierE.setName("Supplier");
        jLabel4 = new javax.swing.JLabel();
        jDateExpireE = new com.toedter.calendar.JDateChooser();
        jDateExpireE.setName("Expire Date");
        btnUpdate = new javax.swing.JButton();
        btnClearE = new javax.swing.JButton();
        btnExitE = new javax.swing.JButton();

        setResizable(true);
        setTitle("Add Products");
        
        lblAddress.setText("Unit Size");
        lblTelNo.setText("Whole Sale Price");
        lblName2.setText("Product Name");
        lblName4.setText("Product description");
        lblAddress2.setText("Discount");
        lblAddress3.setText("Retail Price");
        jLabel1.setText("Supplier");
        jLabel3.setText("Expire Date");
        jDateExpire.setDateFormatString("dd-MM-yyyy");
        lblAddress1.setText("Unit Size");
        lblTelNo1.setText("Whole Sale Price");
        lblName3.setText("Product Name");
        lblName5.setText("Product description");
        lblAddress4.setText("Discount");
        lblAddress5.setText("Retail Price");
        jLabel2.setText("Supplier");
        jLabel4.setText("Expier Date");
        jDateExpireE.setDateFormatString("dd-MM-yyyy");

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtUnitSize.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUnitSizeFocusLost(evt);
            }
        });

        txtDiscount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDiscountFocusLost(evt);
            }
        });

        txtProName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtProNameFocusLost(evt);
            }
        });

        txtProDesc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtProDescFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(46, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(lblName4)
                    .addComponent(jLabel1)
                    .addComponent(lblAddress)
                    .addComponent(lblAddress2)
                    .addComponent(lblName2)
                    .addComponent(lblAddress3)
                    .addComponent(lblTelNo))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtDiscount, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtUnitSize, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtWholesalePrice, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtRetailPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                    .addComponent(txtProName, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateExpire, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(241, 241, 241))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProName)
                    .addComponent(lblName2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUnitSize)
                    .addComponent(lblAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDiscount)
                    .addComponent(lblAddress2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRetailPrice)
                    .addComponent(lblAddress3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtWholesalePrice)
                    .addComponent(lblTelNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jDateExpire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(22, Short.MAX_VALUE))))
        );

        btnAdd.setText("Add");
        btnAdd.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAdd.setPreferredSize(new java.awt.Dimension(37, 19));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnEdit.setText("Exit");
        btnEdit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(181, 181, 181))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAdd, btnClear, btnEdit});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClear)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAdd, btnClear, btnEdit});

        jTabbedPane1.addTab("Add", jPanel2);

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtRetailPriceE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRetailPriceEFocusLost(evt);
            }
        });

        txtProNameE.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtProNameEFocusGained(evt);
            }

        });

        btnSearch.setText("Search");
        btnSearch.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));


        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(lblName5))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(13, 13, 13)
                                        .addComponent(lblTelNo1, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(25, 25, 25)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblAddress1)
                                            .addComponent(lblAddress4)
                                            .addComponent(lblName3)
                                            .addComponent(lblAddress5)))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2)))))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                    .addComponent(txtProNameE, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(56, 56, 56))
                                .addComponent(txtSupplierE, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtWholesalePriceE, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtRetailPriceE, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtDiscountE, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtUnitSizeE, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)))
                            .addComponent(jDateExpireE, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(112, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(txtProDescE, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName3)
                    .addComponent(txtProNameE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProDescE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName5, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUnitSizeE)
                    .addComponent(lblAddress1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDiscountE)
                    .addComponent(lblAddress4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRetailPriceE)
                    .addComponent(lblAddress5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtWholesalePriceE)
                    .addComponent(lblTelNo1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSupplierE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jDateExpireE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        btnUpdate.setText("Update");
        btnUpdate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnClearE.setText("Clear");
        btnClearE.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnClearE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	btnClearEActionPerformed(evt);
            }
        });

        btnExitE.setText("Exit");
        btnExitE.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnExitE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	btnExitEActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnClearE, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnExitE, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(189, 189, 189))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExitE, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClearE, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Edit", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>        
    
    private void createEvents() {
    	txtProName.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyPressed(KeyEvent evt) {
        		boolean isErrored = false;
				if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
					if (!validateTxtField(txtProName)) {
						txtProName.requestFocus();
						isErrored = true;
					} else {
						txtProName.setText(txtProName.getText().toUpperCase());
						txtProDesc.requestFocus();
					}
				} else {
	               	if (validationTip != null && !isErrored)
	            		validationTip.closeBalloon();
				}
        	}
        });
        
        txtProDesc.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyPressed(KeyEvent evt) {
        		boolean isErrored = false;
				if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
					if (!validateTxtField(txtProDesc)) {
						txtProDesc.requestFocus();
						isErrored = true;
					} else {
						txtProDesc.setText(txtProDesc.getText().toUpperCase());
						txtUnitSize.requestFocus();
					}
				} else {
	               	if (validationTip != null && !isErrored)
	            		validationTip.closeBalloon();
				}
        	}
        });
        
        txtUnitSize.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyPressed(KeyEvent evt) {
        		boolean isErrored = false;
				if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
					if (!validateTxtField(txtUnitSize) || !validateNoTxtField(txtUnitSize)) {
						txtUnitSize.requestFocus();
						isErrored = true;
					} else {
						txtUnitSize.setText(txtUnitSize.getText().toUpperCase());
						txtDiscount.requestFocus();
					}
				} else {
	               	if (validationTip != null && !isErrored)
	            		validationTip.closeBalloon();
				}
        	}
        	
			public void keyTyped(KeyEvent e) {
				char c = e.getKeyChar();
				if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) 
						|| (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))) {
					getToolkit().beep();
					e.consume();
				}
			}
        });
        
        
        txtDiscount.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyPressed(KeyEvent evt) {
        		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            		txtRetailPrice.requestFocus();
        		}
        	}
        	
			public void keyTyped(KeyEvent e) {
				char c = e.getKeyChar();
				if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) 
						|| (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))) {
					getToolkit().beep();
					e.consume();
				}
			}
        });

        txtRetailPrice.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyPressed(KeyEvent evt) {
        		boolean isErrored = false;
				if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
					if (!validateTxtField(txtRetailPrice) || !validatePriceTxtField(txtRetailPrice)) {
						txtRetailPrice.requestFocus();
						isErrored = true;
					} else {
				        long retailP = StringFormatter.rupeesToLong(txtRetailPrice.getText());
				        txtRetailPrice.setText(StringFormatter.formatToRupees(retailP));
						txtWholesalePrice.requestFocus();
					}
				} else {
	               	if (validationTip != null && !isErrored)
	            		validationTip.closeBalloon();
				}
        	}
        	
			public void keyTyped(KeyEvent e) {
				char c = e.getKeyChar();
				if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) 
						|| (c == KeyEvent.VK_DELETE)) || (c == KeyEvent.VK_ENTER)) {
					getToolkit().beep();
					e.consume();
				}
			}
        });
        
        txtRetailPrice.addFocusListener(new FocusAdapter() {
        	@Override
        	public void focusLost(FocusEvent arg0) {
        		if (txtRetailPrice.getText() != null && !txtRetailPrice.getText().isEmpty()) {
    		        long retailP = StringFormatter.rupeesToLong(txtRetailPrice.getText());
    		        txtRetailPrice.setText(StringFormatter.formatToRupees(retailP));
        		}
        	}
        });
        
        txtWholesalePrice.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyPressed(KeyEvent evt) {
        		boolean isErrored = false;
				if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
					if (!validateTxtField(txtWholesalePrice) || !validatePriceTxtField(txtWholesalePrice)) {
						txtWholesalePrice.requestFocus();
						isErrored = true;
					} else {
				        long wholeP = StringFormatter.rupeesToLong(txtWholesalePrice.getText());
				        txtWholesalePrice.setText(StringFormatter.formatToRupees(wholeP));
						txtSupplier.requestFocus();
					}
				} else {
	               	if (validationTip != null && !isErrored)
	            		validationTip.closeBalloon();
				}
        	}
        	
			public void keyTyped(KeyEvent e) {
				char c = e.getKeyChar();
				if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) 
						|| (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))) {
					getToolkit().beep();
					e.consume();
				}
			}
        });
        
        txtWholesalePrice.addFocusListener(new FocusAdapter() {
        	@Override
        	public void focusLost(FocusEvent arg0) {
        		if (txtWholesalePrice.getText() != null && !txtWholesalePrice.getText().isEmpty()) {
    		        long retailP = StringFormatter.rupeesToLong(txtWholesalePrice.getText());
    		        txtWholesalePrice.setText(StringFormatter.formatToRupees(retailP));
        		}
        	}
        });
        
        txtSupplier.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyPressed(KeyEvent evt) {
        		boolean isErrored = false;
				if (evt.getKeyCode() == KeyEvent.VK_F4) {
					getSuppFrmSearchBox();
				} else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
					if (!validateTxtField(txtSupplier)) {
						txtSupplier.requestFocus();
						isErrored = true;
					} else {
						txtSupplier.setText(txtSupplier.getText().toUpperCase());
						jDateExpire.requestFocus();
					}
				}
				
               	if (validationTip != null && !isErrored)
            		validationTip.closeBalloon();
			}
        	
        });

        jDateExpire.addFocusListener(new FocusAdapter() {
        	@Override
        	public void focusLost(FocusEvent arg0) {
         		boolean isErrored = false;
					if (!validateDateField(jDateExpire)) {
						jDateExpire.getJCalendar().setVisible(true);
						isErrored = true;
					} else {
						jDateExpire.setDate(jDateExpire.getDate());
						btnAdd.requestFocus();
					}
				
				
               	if (validationTip != null && !isErrored)
            		validationTip.closeBalloon();
        	}
        });
        
        btnSearch.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		getProductFrmSearchBox();
        	}
        });
    
   //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        txtProNameE.addKeyListener(new KeyAdapter() {
        	@Override
			public void keyPressed(KeyEvent evt) {
				boolean isErrored = false;
				if (evt.getKeyCode() == KeyEvent.VK_F4) {
					getProductFrmSearchBox();
				} else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
					if (!validateTxtField(txtProNameE)) {
						txtProNameE.requestFocus();
						isErrored = true;
					} else {
						txtProNameE.setText(txtProNameE.getText().toUpperCase());
						txtProDescE.requestFocus();
					}
				}
				
				if (validationTip != null && !isErrored)
					validationTip.closeBalloon();
			}
        	
        });
        
        txtProDescE.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyPressed(KeyEvent evt) {
        		boolean isErrored = false;
				if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
					if (!validateTxtField(txtProDescE)) {
						txtProDescE.requestFocus();
						isErrored = true;
					} else {
						txtProDescE.setText(txtProDescE.getText().toUpperCase());
						txtUnitSizeE.requestFocus();
					}
				} else {
	               	if (validationTip != null && !isErrored)
	            		validationTip.closeBalloon();
				}
        	}
        });
        
        txtUnitSizeE.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyPressed(KeyEvent evt) {
        		boolean isErrored = false;
				if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
					if (!validateTxtField(txtUnitSizeE) || !validateNoTxtField(txtUnitSizeE)) {
						txtUnitSizeE.requestFocus();
						isErrored = true;
					} else {
						txtUnitSizeE.setText(txtUnitSizeE.getText().toUpperCase());
						txtDiscountE.requestFocus();
					}
				} else {
	               	if (validationTip != null && !isErrored)
	            		validationTip.closeBalloon();
				}
        	}
        	
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
				if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) 
						|| (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))) {
					getToolkit().beep();
					e.consume();
				}
              }
        });
        
        
        txtDiscountE.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyPressed(KeyEvent evt) {
        		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            		txtRetailPriceE.requestFocus();
        		}
        	}
        	
            public void keyTyped(KeyEvent e) {
				char c = e.getKeyChar();
				if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) 
						|| (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))) {
					getToolkit().beep();
					e.consume();
				}
              }
        });

        txtRetailPriceE.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyPressed(KeyEvent evt) {
        		boolean isErrored = false;
				if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
					if (!validateTxtField(txtRetailPriceE) || !validatePriceTxtField(txtRetailPriceE)) {
						txtRetailPriceE.requestFocus();
						isErrored = true;
					} else {
				        long retailP = StringFormatter.rupeesToLong(txtRetailPriceE.getText());
				        txtRetailPriceE.setText(StringFormatter.formatToRupees(retailP));
						txtWholesalePriceE.requestFocus();
					}
				} else {
	               	if (validationTip != null && !isErrored)
	            		validationTip.closeBalloon();
				}
        	}
        	
			public void keyTyped(KeyEvent e) {
				char c = e.getKeyChar();
				if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) 
						|| (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))) {
					getToolkit().beep();
					e.consume();
				}
			}
        });
        
        txtRetailPriceE.addFocusListener(new FocusAdapter() {
        	@Override
        	public void focusLost(FocusEvent arg0) {
        		if (txtRetailPriceE.getText() != null && !txtRetailPriceE.getText().isEmpty()) {
    		        long retailP = StringFormatter.rupeesToLong(txtRetailPriceE.getText());
    		        txtRetailPriceE.setText(StringFormatter.formatToRupees(retailP));
        		}
        	}
        });
        
        txtWholesalePriceE.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyPressed(KeyEvent evt) {
        		boolean isErrored = false;
				if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
					if (!validateTxtField(txtWholesalePriceE) || !validatePriceTxtField(txtWholesalePriceE)) {
						txtWholesalePriceE.requestFocus();
						isErrored = true;
					} else {
				        long wholeP = StringFormatter.rupeesToLong(txtWholesalePriceE.getText());
				        txtWholesalePriceE.setText(StringFormatter.formatToRupees(wholeP));
						txtSupplierE.requestFocus();
					}
				} else {
	               	if (validationTip != null && !isErrored)
	            		validationTip.closeBalloon();
				}
        	}
        	
			public void keyTyped(KeyEvent e) {
				char c = e.getKeyChar();
				if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) 
						|| (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))) {
					getToolkit().beep();
					e.consume();
				}
			}
        });
        
        txtWholesalePriceE.addFocusListener(new FocusAdapter() {
        	@Override
        	public void focusLost(FocusEvent arg0) {
        		if (txtWholesalePriceE.getText() != null && !txtWholesalePriceE.getText().isEmpty()) {
    		        long retailP = StringFormatter.rupeesToLong(txtWholesalePriceE.getText());
    		        txtWholesalePriceE.setText(StringFormatter.formatToRupees(retailP));
        		}
        	}
        });
        
        txtSupplierE.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyPressed(KeyEvent evt) {
        		boolean isErrored = false;
				if (evt.getKeyCode() == KeyEvent.VK_F4) {
					getSuppFrmSearchBox();
				} else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
					if (!validateTxtField(txtSupplierE)) {
						txtSupplierE.requestFocus();
						isErrored = true;
					} else {
						txtSupplierE.setText(txtSupplierE.getText().toUpperCase());
						jDateExpireE.requestFocus();
					}
				}
				
               	if (validationTip != null && !isErrored)
            		validationTip.closeBalloon();
			}
        	
        });

        jDateExpireE.addFocusListener(new FocusAdapter() {
        	@Override
        	public void focusLost(FocusEvent arg0) {
         		boolean isErrored = false;
					if (!validateDateField(jDateExpireE)) {
						jDateExpireE.getJCalendar().setVisible(true);
						isErrored = true;
					} else {
						jDateExpireE.setDate(jDateExpireE.getDate());
						btnUpdate.requestFocus();
					}
				
				
               	if (validationTip != null && !isErrored)
            		validationTip.closeBalloon();
        	}
        });
    }
    
    private boolean validateTxtField(Component c) {   
    	JTextField txtField = (JTextField) c;
        BalloonTipStyle mordernLook = new ModernBalloonStyle(5, 5, Color.pink, Color.pink, Color.red);   
    	if (validationTip != null)
    		validationTip.closeBalloon();
    	
        if (txtField.getText().isEmpty()) {
        		validationTip = new BalloonTip(txtField, new JLabel(txtField.getName() + " Cannot be Empty."), 
        			mordernLook, Orientation.LEFT_ABOVE, AttachLocation.ALIGNED, 100, 20, false);
        	return false;
        } else {
        	return true;
        }
     }
    
    private boolean validateNoTxtField(Component c) {   
    	JTextField txtField = (JTextField) c;
        BalloonTipStyle mordernLook = new ModernBalloonStyle(5, 5, Color.pink, Color.pink, Color.red);   
        String value = txtField.getText();
        if (!value.matches(RegularExpression.RE_NUMBER)) {
        	validationTip = new BalloonTip(txtField, new JLabel(txtField.getName() + " is invalid."), 
        			mordernLook, Orientation.LEFT_ABOVE, AttachLocation.ALIGNED, 100, 20, false);
        	return false;
        } else {
        	if (validationTip != null)
        		validationTip.closeBalloon();
        	return true;
        }
     }
    
    private boolean validatePriceTxtField(Component c) {   
    	JTextField txtField = (JTextField) c;
        BalloonTipStyle mordernLook = new ModernBalloonStyle(5, 5, Color.pink, Color.pink, Color.red);    
        String value = txtField.getText();
        if (!value.matches(RegularExpression.MONEY)) {
        	validationTip = new BalloonTip(txtField, new JLabel(txtField.getName() + " is invalid."), 
        			mordernLook, Orientation.LEFT_ABOVE, AttachLocation.ALIGNED, 100, 20, false);
        	return false;
        } else {
        	if (validationTip != null)
        		validationTip.closeBalloon();
        	return true;
        }
     }
    
    private boolean validateDateField(Component c) {   
    	JDateChooser dateField = (JDateChooser) c;
        BalloonTipStyle mordernLook = new ModernBalloonStyle(5, 5, Color.pink, Color.pink, Color.red);   
    	if (validationTip != null)
    		validationTip.closeBalloon();
    	
        if (dateField.getDate() == null) {
        		validationTip = new BalloonTip(dateField, new JLabel(dateField.getName() + " Cannot be Empty."), 
        			mordernLook, Orientation.LEFT_ABOVE, AttachLocation.ALIGNED, 100, 20, false);
        	return false;
        } else {
        	return true;
        }
     }

    private void txtProNameFocusLost(java.awt.event.FocusEvent evt) {                                     
       txtProName.setText(txtProName.getText().toUpperCase());
    }                                    

    private void txtUnitSizeFocusLost(java.awt.event.FocusEvent evt) {                                      
       txtUnitSize.setText(txtUnitSize.getText().toUpperCase());
    }                                     

    private void txtDiscountFocusLost(java.awt.event.FocusEvent evt) {                                      
       txtDiscount.setText(txtDiscount.getText().toUpperCase());
    }                                     

    private void txtProDescFocusLost(java.awt.event.FocusEvent evt) {                                     
        txtProDesc.setText(txtProDesc.getText().toUpperCase());
    }                                    

    private void btnExitEActionPerformed(java.awt.event.ActionEvent evt) {                                         
        this.setVisible(false);
    }                                        

    private void btnClearEActionPerformed(java.awt.event.ActionEvent evt) {                                          
    	frmEditSetClear();
    }                                         
                                      

    private void txtRetailPriceEFocusLost(java.awt.event.FocusEvent evt) {                                          
        long retailPrice = StringFormatter.rupeesToLong(txtRetailPriceE.getText());
        txtRetailPriceE.setText(StringFormatter.formatToRupees(retailPrice));
    }                                         
    
    
    private void getSuppFrmSearchBox() {
        FrmSearchBox frmSearchBox = new FrmSearchBox(this);
        frmSearchBox.setValue("s.supplier_name", "supplierSearch");
        frmSearchBox.setLocation((int) localFrm.getWidth(), (int) localFrm.getHeight());
        frmSearchBox.setVisible(true);
	}
    
    private void getProductFrmSearchBox() {
        FrmSearchBox frmSearchBox = new FrmSearchBox(this);
        frmSearchBox.setValue("p.pro_name", "productSearch");
        frmSearchBox.setLocation((int) localFrm.getWidth(), (int) localFrm.getHeight());
        frmSearchBox.setVisible(true);
	}

    private void txtProNameEFocusGained(java.awt.event.FocusEvent evt) {                                        
        int proId = getProductId();
        if (proId > 0) {
            Product product = commonDAO.getProductDetails(proId, 0);
            if (product != null) {
                txtProDescE.setText(product.getProductDesc());
                txtUnitSizeE.setText(String.valueOf(product.getUnitSize()));
                txtDiscountE.setText(String.valueOf(product.getDiscount()));
                txtRetailPriceE.setText(StringFormatter.formatToRupees(product.getRetailPrice()));
                txtWholesalePriceE.setText(StringFormatter.formatToRupees(product.getWholeSalePrice()));
                jDateExpireE.setDate(product.getExpireDate());
                Supplier supplier = commonDAO.getSupplierDetailsById(product.getSupplierId());
                if (supplier != null) {
                    txtSupplierE.setText(supplier.getSupplierName());
                } else {
                    txtSupplierE.setText("");
                }
            }
		} else {
			if (getBatchProduct() != null && !getBatchProduct().isEmpty()) {
				FrmBatchProduct frmSearchBox = new FrmBatchProduct(getBatchProduct());
				frmSearchBox.setVisible(true);
				frmSearchBox.setLocation(300, 300);
			}
		}
    }                                       

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {   
    	if (!validateUpdate())
    		return;
    	
        int res = JOptionPane.showConfirmDialog(rootPane, "Do You Want To Update This Product?", "Confirmation!", JOptionPane.YES_NO_OPTION);

        if (res == 0) {
            String proName = txtProNameE.getText();
            String proDesc = txtProDescE.getText();
            String unitSize = txtUnitSizeE.getText();
            String discount = txtDiscountE.getText();
            String retailPrice = txtRetailPriceE.getText();
            String wholePrice = txtWholesalePriceE.getText();
            Date expireDate = jDateExpireE.getDate();
            int supplierId = getSupplierId();

            Product product = new Product();
            product.setProductId(getProductId());
            product.setProductName(proName);
            product.setProductDesc(proDesc);
            product.setUnitSize(Integer.parseInt(unitSize));
            if (discount != null && !discount.isEmpty()) {
                product.setDiscount(Integer.parseInt(discount));
            }
            product.setRetailPrice(StringFormatter.rupeesToLong(retailPrice));
            product.setWholeSalePrice(StringFormatter.rupeesToLong(wholePrice));
            product.setPurchaseDate(new Date());
            product.setExpireDate(expireDate);
            product.setSupplierId(supplierId);

            boolean flag = false;
            try {
                flag = productDAO.addNewProduct(product);
            } catch (SQLException ex) {
                Logger.getLogger(FrmAddNewProduct.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (flag) {
                JOptionPane.showConfirmDialog(rootPane, "Add New Product Successfully!",
                        "Success!", JOptionPane.CLOSED_OPTION);
                this.frmSetClear();
            } else {
                JOptionPane.showConfirmDialog(rootPane, "Add New Product Failed!",
                        "Failed!", JOptionPane.CLOSED_OPTION);
            }

        }
    }                                         

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {                                        
        this.setVisible(false);
    }                                       

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {                                         
        this.frmSetClear();
    }    
    
	public boolean validateAdd() {
		if (!validateTxtField(txtProName)) {
			txtProName.requestFocus();
			return false;
		} else if (!validateTxtField(txtProDesc)) {
			txtProDesc.requestFocus();
			return false;
		} else if (!validateTxtField(txtUnitSize)) {
			txtUnitSize.requestFocus();
			return false;
		} else if (!validateTxtField(txtRetailPrice) || !validatePriceTxtField(txtRetailPrice)) {
			txtRetailPrice.requestFocus();
			return false;
		} else if (!validateTxtField(txtWholesalePrice) || !validatePriceTxtField(txtWholesalePrice)) {
			txtWholesalePrice.requestFocus();
			return false;
		} else if (!validateTxtField(txtSupplier)) {
			txtSupplier.requestFocus();
			return false;
		} else if (!validateDateField(jDateExpire)){
			jDateExpire.requestFocus();
			return false;
		}
		return true;

	}
	
	public boolean validateUpdate() {
		if (!validateTxtField(txtProNameE)) {
			txtProNameE.requestFocus();
			return false;
		} else if (!validateTxtField(txtProDescE)) {
			txtProDescE.requestFocus();
			return false;
		} else if (!validateTxtField(txtUnitSizeE)) {
			txtUnitSizeE.requestFocus();
			return false;
		} else if (!validateTxtField(txtRetailPriceE) || !validatePriceTxtField(txtRetailPriceE)) {
			txtRetailPriceE.requestFocus();
			return false;
		} else if (!validateTxtField(txtWholesalePriceE) || !validatePriceTxtField(txtWholesalePriceE)) {
			txtWholesalePriceE.requestFocus();
			return false;
		} else if (!validateTxtField(txtSupplierE)) {
			txtSupplierE.requestFocus();
			return false;
		} else if (!validateDateField(jDateExpireE)){
			jDateExpireE.requestFocus();
			return false;
		}
		return true;

	}

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {                                       
    	if (!validateAdd())
    		return;
    	
        int res = JOptionPane.showConfirmDialog(rootPane, "Do You Want To Add This Product?", "Confirmation!", JOptionPane.YES_NO_OPTION);

        if (res == 0) {
            String proName = txtProName.getText();
            String proDesc = txtProDesc.getText();
            String unitSize = txtUnitSize.getText();
            String discount = txtDiscount.getText();
            String retailPrice = txtRetailPrice.getText();
            String wholePrice = txtWholesalePrice.getText();
            Date expireDate = jDateExpire.getDate();
            int supplierId = getSupplierId();

            Product product = new Product();
            product.setProductName(proName);
            product.setProductDesc(proDesc);
            product.setUnitSize(Integer.parseInt(unitSize));
            if (discount != null && !discount.isEmpty())
            product.setDiscount(Integer.parseInt(discount));
            product.setRetailPrice(StringFormatter.rupeesToLong(retailPrice));
            product.setWholeSalePrice(StringFormatter.rupeesToLong(wholePrice));
            product.setPurchaseDate(new Date());
            product.setExpireDate(expireDate);
            product.setSupplierId(supplierId);

            boolean flag = false;
            try {
                flag = productDAO.addNewProduct(product);
            } catch (SQLException ex) {
                Logger.getLogger(FrmAddNewProduct.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (flag) {
                JOptionPane.showConfirmDialog(rootPane, "Add New Product Successfully!",
                    "Success!", JOptionPane.CLOSED_OPTION);
                this.frmSetClear();
            } else {
                JOptionPane.showConfirmDialog(rootPane, "Add New Product Failed!",
                    "Failed!", JOptionPane.CLOSED_OPTION);
            }

        }
    }                                      

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClearE;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExitE;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private com.toedter.calendar.JDateChooser jDateExpireE;
    private com.toedter.calendar.JDateChooser jDateExpire;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAddress1;
    private javax.swing.JLabel lblAddress2;
    private javax.swing.JLabel lblAddress3;
    private javax.swing.JLabel lblAddress4;
    private javax.swing.JLabel lblAddress5;
    private javax.swing.JLabel lblName2;
    private javax.swing.JLabel lblName3;
    private javax.swing.JLabel lblName4;
    private javax.swing.JLabel lblName5;
    private javax.swing.JLabel lblTelNo;
    private javax.swing.JLabel lblTelNo1;
    private javax.swing.JTextField txtDiscount;
    private javax.swing.JTextField txtDiscountE;
    private javax.swing.JTextField txtProDesc;
    private javax.swing.JTextField txtProDescE;
    private javax.swing.JTextField txtProName;
    public javax.swing.JTextField txtProNameE;
    private javax.swing.JTextField txtRetailPrice;
    private javax.swing.JTextField txtRetailPriceE;
    public javax.swing.JTextField txtSupplier;
    private javax.swing.JTextField txtSupplierE;
    private javax.swing.JTextField txtUnitSize;
    private javax.swing.JTextField txtUnitSizeE;
    private javax.swing.JTextField txtWholesalePriceE;
    private javax.swing.JTextField txtWholesalePrice;
    BalloonTip validationTip;
    // End of variables declaration                   

    private void frmSetClear() {
        txtWholesalePrice.setText("");
        txtUnitSize.setText("");
        txtDiscount.setText("");
        txtRetailPrice.setText("");
        jDateExpire.setDate(null);
        txtProName.setText("");
        txtProDesc.setText("");
        txtSupplier.setText("");
        
    }

	private void frmEditSetClear() {
		txtWholesalePriceE.setText("");
		txtUnitSizeE.setText("");
		txtDiscountE.setText("");
		txtRetailPriceE.setText("");
		jDateExpireE.setDate(null);
		txtProNameE.setText("");
		txtProDescE.setText("");
		txtSupplierE.setText("");
	}
}

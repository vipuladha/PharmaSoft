/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrmLocationCode.java
 *
 * Created on Aug 1, 2011, 3:22:51 PM
 */
package pharmasoft.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import pharmasoft.db.dao.CommonDAO;
import pharmasoft.db.dao.ProductDAO;
import pharmasoft.db.proxyClasses.ProductBatchProxy;
import pharmasoft.ui.util.ListTableModel;

/**
 *
 * @author gayan
 */
public class FrmSearchBox extends javax.swing.JDialog implements ListSelectionListener {

    JInternalFrame internalFrame;
    String searchColumn;
    String searchName;
    String lastName;
    String queryString;
    int searchId;
    ProductDAO productDAO;

    public String getSearchColumn() {
        return searchColumn;
    }

    private void setSearchColumn(String searchColumn) {
        this.searchColumn = searchColumn;
    }
    
    public String getSearchName() {
        return searchName;
    }

    public void setSearchName(String searchName) {
        this.searchName = searchName;
    }
    
    public String getQueryString() {
        return queryString;
    }

    public void setQueryString(String queryString) {
        this.queryString = queryString;
    }

    public JInternalFrame getInternalFrame() {
        return internalFrame;
    }

    private void setInternalFrame(JInternalFrame internalFrame) {
        this.internalFrame = internalFrame;
    }
    
    public int getSearchId() {
        return searchId;
    }

    public void setSearchId(int searchId) {
        this.searchId = searchId;
    }

    /** Creates new form FrmLocationCode */
    public FrmSearchBox(JInternalFrame internalFrame) {
        initComponents();
        this.setModal(true);
        this.setInternalFrame(internalFrame);
        productDAO = new ProductDAO();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMemDt = new javax.swing.JTable(){
            @Override
            public Component prepareRenderer(TableCellRenderer renderer,int row,int column)
            {
                Component comp=super.prepareRenderer(renderer,row, column);
                int modelRow=convertRowIndexToModel(row);
                if(!isRowSelected(modelRow))
                comp.setBackground(Color.WHITE);
                else
                comp.setBackground(Color.LIGHT_GRAY);
                return comp;
            }
        };
        txtKey = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Search");

        tblMemDt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblMemDt.setCellSelectionEnabled(true);
        tblMemDt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMemDtMouseClicked(evt);
            }
        });
        tblMemDt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblMemDtKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblMemDt);

        txtKey.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtKeyFocusLost(evt);
            }
        });
        txtKey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtKeyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtKeyKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtKey, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void txtKeyKeyPressed(java.awt.event.KeyEvent evt) {                                  
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            tblMemDt.requestFocus();
        }
    }                                 

    private void txtKeyKeyReleased(java.awt.event.KeyEvent evt) {                                   
        if (evt.getKeyCode() != KeyEvent.VK_DOWN) {
            try {
                String searchValue = txtKey.getText().trim();
                String sql = "";
                ResultSet resultSet = null;
                if (searchValue != null && !searchValue.isEmpty()) {
                    if (getQueryString() != null) {
                        sql = getQueryString();
                    }
                    resultSet = productDAO.getSearchingResultSet(sql, getSearchColumn(), searchValue);

                } else {
                    resultSet = productDAO.getSearchResultSet(getSearchName(), this);
                }
                
                if (resultSet != null){                  
                ListTableModel model = ListTableModel.createModelFromResultSet(resultSet);
                tblMemDt.setModel(model);
                tblMemDt.getSelectionModel().addListSelectionListener((ListSelectionListener) this);
                tblMemDt.getColumnModel().getSelectionModel().addListSelectionListener((ListSelectionListener) this); 
                }
            } catch (SQLException ex) {
                Logger.getLogger(FrmSearchBox.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }                                  

    private void tblMemDtKeyPressed(java.awt.event.KeyEvent evt) {                                    
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                int[] selRows = tblMemDt.getSelectedRows();
                Object value = null;
                Object id = null;
                if (selRows.length > 0) {
                    for (int i = 0; i < selRows.length; i++) {
                        TableModel tm = tblMemDt.getModel();
                        value = tm.getValueAt(selRows[0], i + 1);
                        id = tm.getValueAt(selRows[0], i);
                    }
                    if (!(this.getInternalFrame() instanceof FrmStockTaking)) {
                        Vector<ProductBatchProxy> resBatch = productDAO.getProductByProId(Integer.parseInt(id.toString()));
                        if (resBatch.size() > 1) {
//                            id = -10;
                            dispose();
                            FrmBatchProTable frm = new FrmBatchProTable(this.getInternalFrame(), resBatch);
//                            id = frm.getProductId();
                            frm.setModal(true);
                            frm.setVisible(true);                           
                        }
                    }
                    setFormdata(Integer.parseInt(id.toString()), value.toString(), null);
                }
                this.dispose();
            } catch (Exception e) {
                e.printStackTrace();;
            }
        }
    }                                   

    private void tblMemDtMouseClicked(java.awt.event.MouseEvent evt) {                                      
          int[] selRows = tblMemDt.getSelectedRows();
            Object value = null;
            Object id = null;
            if (selRows.length > 0) {
                for (int i = 0; i < selRows.length; i++) {
                     TableModel tm = tblMemDt.getModel();
                    value = tm.getValueAt(selRows[0], i + 1);
                    id = tm.getValueAt(selRows[0], i);
                }
            }
            this.dispose();
    }                                     

    private void txtKeyFocusLost(java.awt.event.FocusEvent evt) {                                 
        tblMemDt.requestFocus();
    }                                
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify                     
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblMemDt;
    private javax.swing.JTextField txtKey;
    // End of variables declaration                   

    public void setValue(String searchColumn,  String searchName) {
        try {
            setSearchColumn(searchColumn);
            setSearchName(searchName);
            ResultSet resultSet = productDAO.getSearchResultSet(searchName, this);
            ListTableModel model = ListTableModel.createModelFromResultSet(resultSet);
            tblMemDt.setModel(model);

            tblMemDt.getSelectionModel().addListSelectionListener((ListSelectionListener) this);
            tblMemDt.getColumnModel().getSelectionModel().addListSelectionListener((ListSelectionListener) this);

        } catch (SQLException ex) {
            ex.printStackTrace();
            System.out.println("Ex------------" + ex.getLocalizedMessage());
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
//        setFormdata();
//        this.dispose();
    }
    
    public void setFormdata(int id, String value, Vector<ProductBatchProxy> resBatch) {
            if (this.getInternalFrame() instanceof FrmAddNewSupplier) {
                FrmAddNewSupplier frmAddNewSupplier = (FrmAddNewSupplier) this.getInternalFrame();
                frmAddNewSupplier.setSupplierId(id);
                frmAddNewSupplier.txtSuppNameE.setText(value);
                frmAddNewSupplier.txtSuppNameE.requestFocus();
            } else if (this.getInternalFrame() instanceof FrmAddNewProduct) {
                FrmAddNewProduct frmAddNewProduct = (FrmAddNewProduct) this.getInternalFrame();
                if (getSearchColumn().contains("supplier_name")) {
                    frmAddNewProduct.setSupplierId(id);
                    frmAddNewProduct.txtSupplier.setText(value);
                    frmAddNewProduct.txtSupplier.requestFocus();
                } else {
                    frmAddNewProduct.setProductId(id);
                    frmAddNewProduct.setBatchProduct(resBatch);
                    frmAddNewProduct.txtProNameE.setText(value);
                    frmAddNewProduct.txtProNameE.requestFocus();
                }

            } else if (this.getInternalFrame() instanceof FrmAddNewProductBatch) {
                FrmAddNewProductBatch frmAddNewProductBatch = (FrmAddNewProductBatch) this.getInternalFrame();
                if (getSearchColumn().contains("supplier_name")) {
                    frmAddNewProductBatch.setSupplierId(id);
                    frmAddNewProductBatch.txtSupplierE.setText(value);
                    frmAddNewProductBatch.txtSupplierE.requestFocus();
                } else {
                    frmAddNewProductBatch.setProductId(id);
                    frmAddNewProductBatch.txtProNameE.setText(value);
                    frmAddNewProductBatch.txtProNameE.requestFocus();
                }
               
            } else if (this.getInternalFrame() instanceof FrmAddNewCustomer) {
                FrmAddNewCustomer frmAddNewCustomer = (FrmAddNewCustomer) this.getInternalFrame();
                frmAddNewCustomer.setCustomerId(id);
                frmAddNewCustomer.txtFirstNameE.setText(value);
                frmAddNewCustomer.txtFirstNameE.requestFocus();
            } else if (this.getInternalFrame() instanceof FrmTransaction) {
                FrmTransaction FrmTransaction = (FrmTransaction) this.getInternalFrame();
                FrmTransaction.setProductId(id);
                FrmTransaction.txtProductCode.setText(value);
            } 
//            else if (this.getInternalFrame() instanceof FrmAddNewCategory) {
//                FrmAddNewCategory frmAddNewCategory = (FrmAddNewCategory) this.getInternalFrame();
//                frmAddNewCategory.setCategoryd(id);
//                frmAddNewCategory.txtCatNameE.setText(value);
//                frmAddNewCategory.txtCatNameE.requestFocus();
//            } 
            else if (this.getInternalFrame() instanceof FrmStockTaking) {
                FrmStockTaking frmStockTaking = (FrmStockTaking) this.getInternalFrame();
                if (getSearchColumn().contains("supplier_name")) {
                    frmStockTaking.setSupplierId(id);
                    frmStockTaking.txtSupplierName.setText(value);
                    frmStockTaking.txtSupplierName.requestFocus();
                } else {
                    frmStockTaking.setProductId(id);
                    frmStockTaking.txtProName.setText(value);
                    frmStockTaking.txtProName.requestFocus();
                }
            } else if (this.getInternalFrame() instanceof FrmPurchaseOrder) {
                FrmPurchaseOrder frmPurchaseOrder = (FrmPurchaseOrder) this.getInternalFrame();
                if (getSearchColumn().contains("supplier_name")) {
                    frmPurchaseOrder.setSupplierId(id);
                    frmPurchaseOrder.txtSupplier.setText(value);
                    frmPurchaseOrder.txtSupplier.requestFocus();
                } else {
                    frmPurchaseOrder.setProductId(id);
                    frmPurchaseOrder.txtProductCode.setText(value);
                    frmPurchaseOrder.txtProductCode.requestFocus();
                }
            } else if (this.getInternalFrame() instanceof FrmWholeSaleTransaction) {
                FrmWholeSaleTransaction frmWholeSaleTrn = (FrmWholeSaleTransaction) this.getInternalFrame();
                if (getSearchColumn().contains("first_name")) {
                    frmWholeSaleTrn.setCustomerId(id);
                    frmWholeSaleTrn.txtCustomer.setText(value);
                    frmWholeSaleTrn.txtCustomer.requestFocus();
                } else {
                    frmWholeSaleTrn.setProductId(id);
                    frmWholeSaleTrn.txtProductCode.setText(value);
                    frmWholeSaleTrn.txtProductCode.requestFocus();
                }

            } else if (this.getInternalFrame() instanceof FrmViewWholeSaleTransaction) {
                FrmViewWholeSaleTransaction frmViewWsTrn = (FrmViewWholeSaleTransaction) this.getInternalFrame();
                frmViewWsTrn.setCustomerId(id);
                frmViewWsTrn.txtCusName.setText(value);
            }
    }
}


